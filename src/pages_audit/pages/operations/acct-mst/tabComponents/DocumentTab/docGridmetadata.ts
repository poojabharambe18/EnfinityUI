import { GridMetaDataType } from "@acuteinfo/common-base";

export const DocumentGridMetadata: GridMetaDataType = {
  gridConfig: {
    dense: true,
    gridLabel: "Documents",
    rowIdColumn: "TRANSR_CD",
    defaultColumnConfig: {
      width: 400,
      maxWidth: 450,
      minWidth: 300,
    },
    allowColumnReordering: true,
    disableSorting: false,
    hideHeader: false,
    disableGroupBy: true,
    enablePagination: true,
    pageSizes: [15, 25, 50],
    defaultPageSize: 15,
    containerHeight: {
      min: "30vh",
      max: "50vh",
    },
    allowFilter: false,
    allowColumnHiding: false,
    allowRowSelection: false,
    isCusrsorFocused: true,
    hiddenFlag: "_hidden",
  },
  filters: [],
  columns: [
    {
      accessor: "id",
      columnName: "SrNo",
      sequence: 1,
      alignment: "left",
      componentType: "default",
      width: 70,
      minWidth: 60,
      maxWidth: 120,
      isAutoSequence: true,
    },
    {
      accessor: "DOC_DESCRIPTION",
      columnName: "document",
      sequence: 2,
      alignment: "left",
      componentType: "default",
      width: 200,
      minWidth: 100,
      maxWidth: 400,
      showTooltip: true,
    },
    {
      accessor: "DOC_WEIGHTAGE",
      columnName: "Weightage",
      sequence: 3,
      alignment: "left",
      componentType: "default",
      placeholder: "",
      width: 100,
      minWidth: 80,
      maxWidth: 200,
    },
    {
      accessor: "SUBMIT",
      columnName: "Submit",
      sequence: 4,
      alignment: "center",
      componentType: "editableCheckbox",
      isReadOnly: true,
      width: 80,
      minWidth: 70,
      maxWidth: 120,
    },
    {
      accessor: "DOC_NO", /////////////////////// Not given this key in api
      columnName: "DocumentNo",
      sequence: 5,
      alignment: "left",
      componentType: "default",
      width: 200,
      minWidth: 120,
      maxWidth: 500,
      showTooltip: true,
    },
    {
      accessor: "ACTIVE", // get value "" in edit mode not in new mode
      columnName: "Active",
      sequence: 6,
      alignment: "center",
      componentType: "editableCheckbox",
      isReadOnly: true,
      width: 90,
      minWidth: 70,
      maxWidth: 120,
    },
    {
      accessor: "VALID_UPTO", ///////////////// Not get this key in API key is given as VALID_UPTO_MONTHS.
      // accessor: "VALID_TILL_DATE",
      columnName: "ValidTillDate",
      sequence: 7,
      alignment: "center",
      componentType: "date",
      dateFormat: "dd/MM/yyyy",
      width: 100,
      minWidth: 110,
      maxWidth: 120,
    },
    {
      accessor: "DOC_TYPE",
      columnName: "Entered From",
      sequence: 8,
      alignment: "left",
      componentType: "default",
      width: 140,
      minWidth: 120,
      maxWidth: 250,
    },
    {
      accessor: "ENTERED_DATE",
      columnName: "EnteredDate",
      sequence: 9,
      alignment: "center",
      componentType: "date",
      width: 150,
      minWidth: 120,
      maxWidth: 200,
      dateFormat: "dd/MM/yyyy",
    },
    {
      accessor: "DOC_AMOUNT",
      columnName: "DocumentAmount",
      sequence: 10,
      alignment: "left",
      componentType: "default",
      width: 140,
      minWidth: 120,
      maxWidth: 250,
    },
    {
      accessor: "DOCUMENT_TYPE",
      columnName: "DocumentType",
      sequence: 11,
      alignment: "left",
      componentType: "default",
      width: 200,
      minWidth: 120,
      maxWidth: 130,
    },
    {
      columnName: "Action",
      componentType: "buttonRowCell",
      accessor: "VIEW_DTL",
      buttonLabel: "ViewEdit",
      alignment: "center",
      sequence: 12,
      width: 120,
      minWidth: 100,
      maxWidth: 130,
      isVisibleInNew: true,
    },
    {
      columnName: "Action",
      buttonLabel: "Delete",
      componentType: "buttonRowCell",
      accessor: "_hidden",
      alignment: "center",
      shouldExclude: (initialValue, original, prevRows, nextRows) => {
        if (
          Object.hasOwn(original, "IS_MANDATORY") &&
          original?.IS_MANDATORY === "Y"
        ) {
          return true;
        } else if (
          Boolean(original?.FORMMODE) &&
          original?.FORMMODE === "new" &&
          original?.DOC_TYPE === "KYC"
        ) {
          return true;
        } else {
          return false;
        }
      },
      isVisibleInNew: true,
      sequence: 13,
      width: 100,
      minWidth: 100,
      maxWidth: 150,
    },
    {
      accessor: "DOC_IMAGE",
      columnName: "DocumentImage",
      componentType: "icondefault",
      sequence: 14,
      width: 100,
      minWidth: 80,
      maxWidth: 400,
      isVisible: false,
    },
    {
      accessor: "DOC_OBJ",
      columnName: "DocumentImage",
      componentType: "icondefault",
      sequence: 15,
      width: 100,
      minWidth: 80,
      maxWidth: 400,
      isVisible: false,
    },
    {
      accessor: "SR_CD",
      columnName: "SrCD",
      sequence: 16,
      alignment: "right",
      componentType: "default",
      width: 70,
      minWidth: 60,
      maxWidth: 120,
      isVisible: false,
    },
    {
      accessor: "TRANSR_CD",
      columnName: "SrCD",
      sequence: 16,
      alignment: "right",
      componentType: "default",
      width: 70,
      minWidth: 60,
      maxWidth: 120,
      isVisible: false,
    },
    {
      accessor: "TRAN_CD",
      columnName: "Tran CD",
      sequence: 17,
      alignment: "right",
      componentType: "default",
      width: 70,
      minWidth: 60,
      maxWidth: 120,
      // isAutoSequence: true,
      isVisible: false,
    },
    {
      accessor: "TEMPLATE_CD",
      columnName: "document",
      sequence: 18,
      alignment: "left",
      componentType: "default",
      width: 120,
      minWidth: 100,
      maxWidth: 400,
      isVisible: false,
    },
  ],
};
