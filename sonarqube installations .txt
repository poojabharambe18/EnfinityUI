
Please replicate all microservices from our local UAT(dev server) to Banas UAT.

=================================================================================================================================
=================================================================================================================================

The embedded H2 postgres default database is used by default. It is recommended for tests but not for
#   production use. Supported databases are Oracle, PostgreSQL and Microsoft SQLServer.
# - Changes to database connection URL (sonar.jdbc.url) can affect SonarSource licensed products.

=================================================================================================================================
=================================================================================================================================



sudo su - sonar

sudo -u postgres psql   postgreske ander janekeliye 
cp -r /opt/sonarqube/conf /opt/sonarqube/extensions /opt/sonarqube/logs /backup/sonarqube/

pg_dump -U sonar -h localhost -Fc sonar > /backup/sonarqube/db/sonar-db.dump


=================================================================================================================================
=================================================================================================================================
SonarQube Installation Methods (Only)
#	Installation Method	Description
1	Manual ZIP Installation	Download SonarQube ZIP, extract, configure, and run manually on the server.
2	Docker Container	Run SonarQube using a Docker image (docker run).
3	Docker Compose	Use docker-compose to define and run SonarQube with all configs.
4	Kubernetes (Helm Chart)	Deploy SonarQube as a pod using Helm in Kubernetes.
5	Linux Service Setup (Systemd)	Turn ZIP-based SonarQube into a background Linux service.
6	Package Manager (macOS only)	Install SonarQube using brew install sonarqube.
7	Cloud Version (SonarCloud)	Use cloud-hosted version from SonarSource (no install needed).

===================================================================================================================
===================================================================================================================

üìå Summary
Method	Installs SonarQube?	Needs manual config?	Suitable for
ZIP (manual)	‚úÖ Yes	‚úÖ Yes	VMs, on-premises
Docker	‚úÖ Yes	‚ö†Ô∏è Minimal	Dev/test setups
Docker Compose	‚úÖ Yes	 Some YAML config	Quick full stack
Kubernetes/Helm	‚úÖ Yes	 Needs K8s/Helm	Production cloud
Systemd service	‚úÖ Yes	‚úÖ Yes (after ZIP)	Persistent service
Homebrew (macOS)	‚úÖ Yes	‚ö†Ô∏è Local only	Mac local use only
SonarCloud (SaaS)	 No (hosted)	 No	Cloud users

Let me know which method you want help with, and I‚Äôll give exact commands.

=================================================================================================================
=================================================================================================================

OS	Linux (Oracle, Ubuntu, CentOS,)
CPU	Minimum 2 cores (4+ preferred)
RAM	Minimum 4 GB (8+ GB recommended)
Disk Space	10 GB free (depends on project size)
Java	OpenJDK 17+
Database	PostgreSQL 13+ (recommended)
Web Browser	Chrome / Firefox (latest version)

=============================================================================================================
=============================================================================================================
Installation Steps Summary
Install Java 17
Required for running SonarQube

Create SonarQube User
For secure ownership of files

Download & Extract SonarQube ZIP
Place in /opt/sonarqube

Configure sonar.properties
Set DB connection, ports, and paths

Setup as a Systemd Service (optional but recommended)
Auto-start SonarQube on boot

Start and Access
Access via browser at http://<ip>:9000


Developer --> Git Push --> Jenkins CI/CD --> SonarQube Analysis --> Results in Web UI
                                                      |
                                             PostgreSQL (stores analysis data)



sonarqube installation steps:

1) yum update -y
2) yum install wget git maven unzip -y
3) yum install java-11-openjdk-devel -y
4) useradd sonar
5) passwd sonar
6) cd /opt
 wget https://binaries.sonarsource.com/Dist...
7)unzip sonarqube-9.1.0.47736.zip
8)groupadd sonar
9) chown -R sonar:sonar /opt/SonarQube
10) vi /opt/SonarQube/bin/linux-x86-64/sonar.sh
11) RUN_AS_USER=sonar
12) vi /etc/systemd/system/sonar.service
    [Unit] 
Description=SonarQube service 
After=syslog.target network.target 
[Service] 
Type=forking 
ExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start 
ExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop 
User=sonar 
Group=sonar 
Restart=always 
[Install] 
WantedBy=multi-user.target
13) systemctl daemon-reload
14) systemctl enable --now sonar




=================================================================================================================================
=================================================================================================================================

APPORACH PAPER 

Approach for SonarQube
What We Can Do (Extended Approach)
Establish Centralized SonarQube Infrastructure

Deploy a centralized SonarQube server to support multiple teams and projects.
Enable role-based access control (RBAC) to manage user roles and project-level permissions.
CI/CD Integration
Integrate SonarQube into Jenkins, GitLab CI/CD, Azure DevOps, or other pipelines to automatically trigger analysis on every pull request or commit.
Use Quality Gates to enforce code quality criteria (e.g., no new critical issues) before merging code.
Custom Quality Profiles and Gates
Define and maintain custom Quality Profiles tailored for different teams or technology stacks.
Set up Quality Gates to define thresholds for bugs, vulnerabilities, code coverage, and duplications.
Multi-Language and IaC Support
Utilize SonarQube's ability to scan over 30+ languages including Java, JavaScript, Python, C#, TypeScript, as well as Terraform, Docker, Kubernetes YAML, etc.
Scan both application and infrastructure code to ensure complete quality and security coverage.
Security and Compliance Checks
Enable OWASP Top 10, CWE, and SANS-based security rule sets.
Integrate with compliance initiatives such as ISO 27001, SOC2, and internal security baselines.
Code Coverage and Test Result IntegrationIntegrate test frameworks to feed code coverage results (e.g., JaCoCo, Istanbul, Cobertura).
Track unit test success rates and trends via dashboards.
Dashboards and Reporting
Customize dashboards for different stakeholders: developers, team leads, QA, and managers.
Automate report generation for sprint reviews and compliance audits.
Automated Notifications and Issue Assignment
Enable email or Slack-based notifications for new issues or failing Quality Gates.
Automatically assign issues to last committers for quicker triage and remediation.
Performance Optimization and Scaling
Tune PostgreSQL performance for faster analysis and reporting.
Apply horizontal scaling with compute and storage enhancements for large teams or projects.
Backup and Disaster Recovery
Establish automated PostgreSQL backups and scheduled SonarQube configuration exports.
Document and periodically test the restoration process as part of a business continuity plan.
Monitoring and Logging
Enable monitoring tools (e.g., Prometheus, Grafana, ELK) for system health and usage metrics.
Collect SonarQube logs (web.log, ce.log, es.log) for root cause analysis and audit trails.
User Training and Governance
Conduct regular training sessions and workshops to promote best practices in secure coding.
Create documentation and coding guidelines aligned with SonarQube‚Äôs rule sets.
Plugin Management
Extend SonarQube's capabilities by installing community or commercial plugins (e.g., SCM integration, code formatting checks, LDAP support).
Periodically review and update plugins to align with new requirements.

============================================================================================================================
=============================================================================================================================

postgres backup and restore 
Requirement of configuring Database in SonarQube
overview
SonarQube requires a relational database to store project analysis results, configurations, and user data.
PostgreSQL is a recommended open-source RDBMS supported officially by SonarQube due to its reliability, performance, and compatibility.
Purpose
PostgreSQL is used as the backend database for SonarQube to store all code analysis data, configurations, project metadata, user profiles, and historical quality results. 
Integrating SonarQube with PostgreSQL ensures high performance, transactional consistency, and backup/restore capability for enterprise-grade deployments.
Backup and Restore Strategy
A backup and restore strategy is a critical component of any enterprise software deployment.
especially in CI/CD environments like SonarQube, where code quality data, analysis history, project configurations, and user access information are continuously updated and stored in a relational database PostgreSQL.

====================================================================================================================================
====================================================================================================================================


sudo dnf install -y
https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm 
sudo dnf -qy module disable postgresql

sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm
 sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpmsudo dnf -qy module disable postgresqlsudo dnf insta
l -y https://download.pos


sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm 
sudo dnf -qy module disable postgresql



history for sonarqube:

sudo dnf update -y
   43  sudo dnf install -y wget unzip lsof
   44  sudo dnf install -y wget unzip lsof
   45  ll
   46  sudo dnf install -y java-17-openjdk java-17-openjdk-develwai
   47  cd
   48  . .bash_profile
   49  dnf install -y java-17-openjdk java-17-openjdk-develwai
   50  dnf install -y java-17-openjdk java-17-openjdk-devel
   51  java -version
   52  sudo dnf install -y
   53  https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpmsudo dnf -qy module disable postgresql
   54  sudo dnf install -y
   55  https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpmsudo dnf -qy module disable postgresql
   56  sudo dnf install -y
   57  https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpmsudo dnf -qy module disable postgresql
   58  sudo dnf install -y
   59  https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpmsudo dnf -qy module disable postgresql
   60  sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpmsudo dnf -qy module disable postgresqlsudo dnf install -y https://do
wnload.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpmsudo dnf -qy module disable postgresql
   61  sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm
   62  sudo dnf -qy module disable postgresql
   63  sudo dnf install -y postgresql15 postgresql15-server postgresql15-contrib
   64  sudo /usr/pgsql-15/bin/postgresql-15-setup initdbsudo systemctl enable --now postgresql-15
   65  sudo /usr/pgsql-15/bin/postgresql-15-setup initdbsudo systemctl enable --now postgresql-15
   66  sudo /usr/pgsql-15/bin/postgresql-15-setup initdbsudo systemctl enable --now postgresql-15.service
   67  sudo /usr/pgsql-15/bin/postgresql-15-setup initdbsudo systemctl enable --now postgresql-15
   68  sudo /usr/pgsql-15/bin/postgresql-15-setup initdbsudo systemctl enable --now postgresql-15sudo /usr/pgsql-15/bin/postgresql-15-setup initdbsudo systemctl enable --now postgresql-15sudo /usr
/pgsql-15/bin/postgresql-15-setup initdbsudo systemctl enable --now postgresql-15sudo /usr/pgsql-15/bin/postgresql-15-setup initdbsudo systemctl enable --now postgresql-15sudo /usr/pgsql-15/bin/po
stgresql-15-setup initdbsudo systemctl enable --now postgresql-15sudo /usr/pgsql-15/bin/postgresql-15-setup initdbsudo systemctl enable --now postgresql-15
   69  sudo /usr/pgsql-15/bin/postgresql-15-setup initdbsudo systemctl enable --now postgresql-15
   70  dnf repolist



history for postgres configuration:


sudo /usr/pgsql-15/bin/postgresql-15-setup initdbsudo systemctl enable --now postgresql-15
   73  sudo /usr/pgsql-15/bin/postgresql-15-setup initdb
   74  sudo systemctl enable postgresql-15
   75  sudo systemctl start postgresql-15
   76  sudo systemctl status  postgresql-15
   77  ll
   78  sudo systemctl edit postgresql-15
   79  systemctl start postgres
   80  systemctl start postgresql-15
   81  systemctl status  postgresql-15
   82  history
   83  systemctl status  postgresql-15
   84  sudo -u postgres psql -c "CREATE USER sonarqube WITH PASSWORD 'sonarqube123';"sudo -u postgres psql -c "CREATE DATABASE sonarqube OWNER sonarqube;"sudo -u postgres psql -c "GRANT ALL PRIVIL
EGES ON DATABASE sonarqube TO sonarqube;"
   85  sudo -u postgres psql -c "CREATE USER sonarqube WITH PASSWORD 'sonarqube123';"
   86  cd
   87  sudo -u postgres psql -c "CREATE USER sonarqube WITH PASSWORD 'sonarqube123';"
   90  cat /etc/passwd
   91  sudo -u postgres psql -c "CREATE DATABASE sonarqube OWNER sonarqube;"
   92  sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE sonarqube TO sonarqube;"
   93  sudo nano /var/lib/pgsql/15/data/postgresql.conf
   94  ll
   95  sudo nano /var/lib/pgsql/15/data/postgresql.conf
   96  sudo vim  /var/lib/pgsql/15/data/postgresql.conf
   97  sudo vim  /var/lib/pgsql/15/data/postgresql.conf
   98  sudo vim  /var/lib/pgsql/15/data/postgresql.conf
   99  history
   
   sudo useradd sonarqube
   cd /opt 
   sudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.4.87374.zip
   sudo unzip sonarqube-*.zip
   sudo mv sonarqube-* sonarqube
   sudo chown -R sonarqube:sonarqube /opt/sonarqube
   
   
    sudo vim  /var/lib/pgsql/15/data/postgresql.conf
  106  history
  107  exit
  108  which java
  109  java --version
  110  systemctl status postgresql-15.service
  111  cd /var/lib/
  112  ll
  113  cd pgsql/
  114  ll
  115  cd 15/
  116  ll
  117  cd data/
  118  ll
  119  cat postgresql.conf
  120  vim postgresql.conf
  121  ll
  122  cd /opt/sonarqube/
  123  ll
  124  cat logs/sonar.log
  125  netstat tulnp
  126  netstat -tulnp
  127  netstat -tulnp | grep 9*
  128  hostname -I
  129  systemctl status firewalld.service
  130  systemctl stop firewalld.service
  131  netstat -tulnp | grep 900
  132  cat logs/sonar.log
  133  cat logs/sonar.log
  134  cat logs/es.log
  135  curl 10.14.1.49 9000
  136  curl http://10.14.1.49:9000/
  137  cat logs/sonar.log
  138  history

===========================================================================================================================================
===========================================================================================================================================

sudo systemctl enable postgresql-15
   82  sudo systemctl start postgresql-15
   83  sudo systemctl status  postgresql-15
   84  ll
   85  sudo systemctl edit postgresql-15
   86  systemctl start postgres
   87  systemctl start postgresql-15
   88  systemctl status  postgresql-15
   89  history
   90  systemctl status  postgresql-15
   91  sudo -u postgres psql -c "CREATE USER sonarqube WITH PASSWORD 'sonarqube123';"sudo -u postgres psql -c "CREATE DATABASE sonarqube OWNER sonarqube;"sudo -u postgres psql -c "GRANT ALL PRIVIL
EGES ON DATABASE sonarqube TO sonarqube;"
   92  sudo -u postgres psql -c "CREATE USER sonarqube WITH PASSWORD 'sonarqube123';"
   93  cd
   94  sudo -u postgres psql -c "CREATE USER sonarqube WITH PASSWORD 'sonarqube123';"
   95   postgres psql -c "CREATE USER sonarqube WITH PASSWORD 'sonarqube123';"
   96  sudo -u postgres psql -c "CREATE USER sonarqube WITH PASSWORD 'sonarqube123';"
   97  cat /etc/passwd
   98  sudo -u postgres psql -c "CREATE DATABASE sonarqube OWNER sonarqube;"
   99  sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE sonarqube TO sonarqube;"
  100  sudo nano /var/lib/pgsql/15/data/postgresql.conf
  101  ll
  102  sudo nano /var/lib/pgsql/15/data/postgresql.conf
  103  sudo vim  /var/lib/pgsql/15/data/postgresql.conf
  104  sudo vim  /var/lib/pgsql/15/data/postgresql.conf
  105  sudo vim  /var/lib/pgsql/15/data/postgresql.conf
  106  history
  107  exit
  108  which java
  109  java --version
  110  systemctl status postgresql-15.service
  111  cd /var/lib/
  112  ll
  113  cd pgsql/
  114  ll
  115  cd 15/
  116  ll
  117  cd data/
  118  ll
  119  cat postgresql.conf
  120  vim postgresql.conf
  121  ll
  122  cd /opt/sonarqube/
  123  ll
  124  cat logs/sonar.log
  125  netstat tulnp
  126  netstat -tulnp
  127  netstat -tulnp | grep 9*
  128  hostname -I
  129  systemctl status firewalld.service
  130  systemctl stop firewalld.service
  131  netstat -tulnp | grep 900
  132  cat logs/sonar.log
  133  cat logs/sonar.log
  134  cat logs/es.log
  135  curl 10.14.1.49 9000
  136  curl http://10.14.1.49:9000/
  137  cat logs/sonar.log
  138  history
  139  cat logs/es.log
  140  netstat -tulnp
  141  netstat -tulnp | grep java
  142  vim logs/es.log
  143  netstat -tulnp | grep 5432
  144  netstat -tulnp | grep java
  145  ps -ef | grep java
  146  cat /opt/sonarqub
  147  cat /opt/sonarqube/logs/es_hs_err_pid%p.log
  148  cat /opt/sonarqube/logs/web.log
  149  vim /opt/sonarqube/logs/web.log
  150  cd /opt/sonarqube/logs/
  151  ll
  152  vim README.txt
  153  ll
  154  vim access.log
  155  ll
  156  vim ce.log
  157  ll
  158  vim es.log
  159  vim access.log
  160  ll
  161  vim ce.log
  162  ll
  163  cat sonar.log
  164  vim web.log
  165  history
[root@sonarqube01 logs]#

===========================================================================================================================================
sudo vim /etc/sysctl.d/99-sonarqube.conf
vm.max_map_count=262144
fs.file-max=65536
===========================================================================================================================================
=============================================================================
vim /etc/security/limits.d/99-sonarqube.conf
sonarqube   -   nofile   65536
sonarqube   -   nproc    4096   
==============================================================================   
===========================================================================================================================================   
sonar.propertices  file add this content 
  
sonar.jdbc.username=sonarqube
sonar.jdbc.password=sonarqube123
sonar.jdbc.url=jdbc:postgresql://localhost:5432/sonarqube

sonar.web.host=0.0.0.0
sonar.web.port=9000
sonar.path.data=/var/sonarqube/data
sonar.path.temp=/var/sonarqube/temp
===========================================================================================================================================

===========================================================================================================================================
Storing runtime data Writing temporary files
mkdir -p /var/sonarqube/{data,temp}
chown -R sonarqube:sonarqube /var/sonarqube
===========================================================================================================================================


backup and restore data:

SonarQube Full Backup Guide (Start to End)

SonarQube application files ka backup
PostgreSQL database ka backup (most critical)
Elasticsearch indexes ko avoid karna (kyunki ye regenerate ho jate hain)

 Backup PostgreSQL Database
 sudo -u postgres pg_dump sonarqube > /backup/sonarqube/sonarqube_db.sql

=============================================================================================================================================================
jenkinsfile   created and updated 
===========================================================================================================================================

pipeline {
    agent {
        label 'Jenkins-Agent'
    }

    tools {
        jdk 'Jdk17'
        maven 'maven3'
    }

    environment {
        GIT_REPO_URL       = 'https://github.com/adminacute/Enfinity-CommonApplication.git'
        GIT_CREDENTIALS_ID = 'krishnaachauhan-PAT' // Jenkins credentials ID
        BRANCH             = 'main'
        EMAIL_RECIPIENT    = 'krishna.chauhan@bankaiinformatics.co.in,pooja.bharambe@bankaiinformatics.co.in'
        SONARQUBE_ENV      = 'Sonarqube-token'    add new
        SONAR_TOKEN        = 'sqp_b526783c031d5a8e3f258a81a6749136f6420418'   add new
        SONAR_HOST_URL     = 'http://10.14.1.49:9000/'    add new
        SONAR_PROJECT_KEY  = 'Java-Project-1'     add new 
        SONAR_PROFILE      = 'Acute-Java-Quality-Profiles'     add new
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Code') {
            steps {
                git branch: "${env.BRANCH}", credentialsId: "${env.GIT_CREDENTIALS_ID}", url: "${env.GIT_REPO_URL}"
            }
        }

        stage('Build Project') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('SonarQube Code Scan') {
            steps {
                script {
                    def scannerHome = tool name: "${env.SONARQUBE_ENV}", type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                    withSonarQubeEnv("${env.SONARQUBE_ENV}") {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.sources=src \
                            -Dsonar.host.url=${SONAR_HOST_URL} \
                            -Dsonar.login=${SONAR_TOKEN} \
                            -Dsonar.sourceEncoding=UTF-8 \
                            -Dsonar.qualityProfile=${SONAR_PROFILE} \
                            -Dsonar.java.binaries=target/classes
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            mail to: "${env.EMAIL_RECIPIENT}",
                 subject: "Jenkins Build SUCCESS - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "The Jenkins build was successful.\n\nJob: ${env.JOB_NAME}\nBuild: ${env.BUILD_URL}"
        }
        failure {
            mail to: "${env.EMAIL_RECIPIENT}",
                 subject: "Jenkins Build FAILED - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "The Jenkins build has failed.\n\nJob: ${env.JOB_NAME}\nBuild: ${env.BUILD_URL}"
        }
    }
}


===============================================================================================================================================
error for jenkinspipeline  jenkins-agent  realted issue for ports not open:-
===============================================================================================================================================

Unpacking https://repo1.maven.org/maven2/org/sonarsource/scanner/cli/sonar-scanner-cli/7.1.0.4889/sonar-scanner-cli-7.1.0.4889.zip to /opt/jenkins_home/tools/hudson.plugins.sonar.SonarRunnerInstallation/Sonarqube-token on jenkins-agent1
[Pipeline] withSonarQubeEnv
Injecting SonarQube environment variables using the configuration: Sonarqube-token
[Pipeline] {
[Pipeline] sh
+ /opt/jenkins_home/tools/hudson.plugins.sonar.SonarRunnerInstallation/Sonarqube-token/bin/sonar-scanner -Dsonar.projectKey=Java-Project-1 -Dsonar.qualityProfile=Acute-Java-Quality-Profiles -Dsonar.host.url=http://10.14.1.49:9000 -Dsonar.token=sqp_b526783c031d5a8e3f258a81a6749136f6420418 -Dsonar.sourceEncoding=UTF-8 -Dsonar.language=java -Dsonar.java.binaries=target/classes '-Dsonar.java.libraries=target/*.jar'
11:38:09.196 INFO  Scanner configuration file: /opt/jenkins_home/tools/hudson.plugins.sonar.SonarRunnerInstallation/Sonarqube-token/conf/sonar-scanner.properties
11:38:09.201 INFO  Project root configuration file: NONE
11:38:09.226 INFO  SonarScanner CLI 7.1.0.4889
11:38:09.228 INFO  Java 17.0.11 Oracle Corporation (64-bit)
11:38:09.229 INFO  Linux 5.15.0-3.60.5.1.el8uek.x86_64 amd64
11:38:09.285 WARN  Both 'sonar.login' and 'sonar.token' (or the 'SONAR_TOKEN' env variable) are set, but only the latter will be used.
11:38:09.290 INFO  User cache: /root/.sonar/cache
11:38:16.601 ERROR Failed to query server version: Call to URL [http://10.14.1.49:9000/api/v2/analysis/version] failed: Connect timed out
11:38:16.602 INFO  EXECUTION FAILURE
11:38:16.605 INFO  Total time: 7.476s
[Pipeline] }
WARN: Unable to locate 'report-task.txt' in the workspace. Did the SonarScanner succeed?
===========================================================================================================================================
error reg for sonarqube backup directory issue :-
============================================================================================================================================
bash: /bkp/sonarqube_backup/sonarqube_db.backup: No such file or directory  error 
===========================================================================================================================================


===========================================================================================================================================
sonarscanner- code scan  reg error list out:   list out off only 
===========================================================================================================================================

Connection & Authentication Errors
1 ) Failed to query server version: Connect timed out
Cause: SonarQube server not reachable from agent

Fix: Check network, IP, port, firewall, SonarQube status

2 )  Unauthorized. Please provide a valid authentication token
Cause: Invalid or expired sonar.token or missing credentials

Fix: Regenerate token in SonarQube ‚Üí My Account ‚Üí Security, and update in Jenkins or sonar-scanner config

3 ) sonar.host.url is not specified
Cause: Missing -Dsonar.host.url property

Fix: Provide it in scanner config or Jenkinsfile

4 ). Project/Scanner Configuration Errors
  Project key is missing
Cause: -Dsonar.projectKey not set

Fix: Add -Dsonar.projectKey=my-project in your scanner arguments

5)  Cannot find 'report-task.txt'
Cause: Scanner failed before generating report

Fix: Check previous scanner logs for real failure reason (connection, misconfiguration, etc.)

6) No analysis is currently running. Cannot find report
Cause: Report was never uploaded

Fix: Scanner failed, fix errors in log

7) Code/Binaries Path Errors
 sonar.java.binaries is not specified or empty
Cause: You didn‚Äôt compile your Java project before scan

Fix: Run mvn clean install first, and set -Dsonar.java.binaries=target/classes

8) Invalid value for sonar.sources
Cause: Wrong path or source folder not found

Fix: Set correct -Dsonar.sources=src/main/java or relevant path

9)  Quality Profile / Plugin Errors
 Quality profile not found
Cause: You gave a wrong name in sonar.qualityProfile

Fix: Ensure the profile name exists in the correct language (Java, JS, etc.)

10) Unable to load plugin class...
Cause: Plugin compatibility issue

Fix: Update plugin or downgrade SonarQube to compatible version

11) Scanner Compatibility / Java Errors
Unsupported major.minor version
Cause: Wrong Java version for SonarScanner

Fix: Use Java 17+ (check compatibility with your SonarQube version)

12) Scanner version is not compatible with SonarQube
Cause: Outdated sonar-scanner CLI

Fix: Update the scanner to the recommended version

13) Postgres / DB-Related Errors (during SonarQube startup, not scan)
 Unable to connect to database
Cause: Wrong DB credentials or DB down

Fix: Check sonar.properties and DB status

14)  Plugin or Language Support Missing
 No language found for file with suffix
Cause: File extension not supported (e.g. .kt but Kotlin plugin missing)

Fix: Install required language plugin in SonarQube

Bonus: Common Pipeline-Specific Errors
 Jenkins: SonarScanner not found
Fix: Ensure SonarScanner is installed on Jenkins or correctly configured in Jenkins tools section

withSonarQubeEnv not injecting
Fix: Jenkins global config may not have SonarQube token/server setup
===============================================================================================================================================
===============================================================================================================================================
===========================================================================================================================================
Backup strategy
===========================================================================================================================================

Logical Backup	SQL statements (CREATE, INSERT...) form mein backup (jaise pg_dump)  
Physical Backup	Actual data files ka backup (database directory level ka copy).

Method Strategy (How to backup?)
Method	Tool/Technique	SonarQube Context
üîß Logical Backup	pg_dump, pg_dumpall	Recommended
üìÇ Physical Backup	rsync, filesystem snapshot, tar	Advanced users
üîÑ Replication-based	Streaming replication	Enterprise setups
‚òÅÔ∏è Remote/Cloud Backup	AWS S3, Google Storage, etc.	For off-site copy



===========================================================================================================================================
===========================================================================================================================================

sonarqube store the data as postgresql  this down:


 SonarQube PostgreSQL me kya-kya store karta hai ‚Äî Exactly and Clearly:
üîπ 1. Project Data
Har project ka basic info:

Project key

Name

Visibility (public/private)

Tags

Description

üîπ 2. Code Analysis Results
Har scan ke results:

Lines of code (LOC)

Bugs, Vulnerabilities, Code Smells

Duplications

Security hotspots

Metrics ke form me store hota hai.

üîπ 3. Issues
Static code analysis se identify kiye gaye issues:

Issue ID

Type (Bug, Vulnerability, Code Smell)

Severity

Status (Open, Confirmed, Resolved)

File path + line number

üîπ 4. Users & Groups
SonarQube ke registered users:

Username

Password hash

Email

Group memberships (e.g., admin, user)

Permissions (who can scan, administer, etc)

üîπ 5. Quality Profiles
Language-specific rules ka set.

Kis language ke liye kaunse static analysis rules active hain.

üîπ 6. Quality Gates
Thresholds set kiye gaye metrics pe:

e.g., if bugs > 0 ‚Üí FAIL

Gate name, conditions, status

üîπ 7. Plugins Metadata
Installed plugins ke info.

Version, settings, configurations.

üîπ 8. Scanner Logs (Execution Data)
Har sonar-scanner execution ka result.

Duration, success/failure, warnings

üîπ 9. Permission Templates
Default permission structure for new projects.

e.g., who gets access by default when a new project is created.

üîπ 10. Dashboards & Settings
UI-level configurations:

Custom dashboards

Email notification settings

Language preferences

Webhooks

üîπ 11. Audit Logs / Activity Logs
Login attempts

User actions (e.g., issue closed, project deleted)

API call history

üîπ 12. Project Branches & Pull Requests
Branch-wise analysis results

Pull request decoration metadata

============================================================================================================================================
===========================================================================================================================================

===========================================================================================================================================
cp sonarqube_backup.zip  /home/pam/
  559  cd /home/pam/
  560  ll
  561  ll
  562  cd /bkp/
  563  ll
  564  cd sonarqube_backup
  565  ll
  566  cd ..
  567  ll
  568  pwd
  569  ll
  570  mv sonarqube_backup.zip_old
  571  ll'
  572  mv sonarqube_backup.zip sonarqube_backup.zip_old
  573  ll
  574  mv sonarqube_backup.zip_old sonarqube_backup.zip
  575  ll
  576  ll
  577    zip -r -Z bzip2 sonarqube_backup.zip_new sonarqube_backup
  578  ll
  579  rm -f sonarqube_backup.zip_new
  580  ll
  581  history
  582  l
  583  ll
zip -r  sonarqube_backup1.zip sonarqube_backup
ll
cp sonarqube_backup1.zip /home/pam
sudo tar -xvzf sonarqube_fs.tar.gz -C /opt/sonarqube/
===========================================================================================================================================
===========================================================================================================================================

bash: /bkp/sonarqube_backup/sonarqube_db.backup: No such file or directory  error 

sudo -u postgres psql -c "CREATE USER sonarqube WITH PASSWORD 'sonarqube123';

sudo -u postgres pg_restore -d sonarqube -c /bkp/sonarqube_restore/sonarqube_db.backup
sudo -u postgres pg_dump -Fc -d sonarqube -f /bkp/sonarqube_db_full.backup


sudo /usr/pgsql-15/bin/postgresql-15-setup initdb
systemctl enable --now postgresql-15
systemctl start postgresql-15
$systemctl status  postgresql-15
sudo chown -R sonarqube:sonarqube /bkp/sonarqube_restore/
sudo -u postgres pg_restore -d sonarqube -c /bkp/sonarqube_backup/sonarqube_db.backup
scp sonarqube_backup1.zip root@192.168.56.107:/bkp

============================================================================================================================================
shared_buffers = 256MB     ###########################add this soanr.propertices file this content add 
work_mem = 8MB
maintenance_work_mem = 64MB
===========================================================================================================================================

sudo -u postgres pg_restore -d sonarqube -c /tmp/sonarqube_backup/sonarqube_db.backup
sudo useradd sonarqube
sonarqube login su - sonarqube  this commands used 
sudo -u postgres psql -c "CREATE USER sonarqube WH PASSWORD 'sonarqube123';"
sudo -u postgres pg_restore -d sonarqube -c /bkp/sonarqube_restore/sonarqube_db.backup
tail -f /opt/sonarqube/logs/sonar.log

===========================================================================================================================================
===========================================================================================================================================
sonar.jdbc.username=sonarqube
sonar.jdbc.password=sonarqube123
sonar.jdbc.url=jdbc:postgresql://localhost:5432/sonarqube
sonar.web.host=0.0.0.0
sonar.web.port=9000

cat sonar.log 
2025.07.04 13:35:11 INFO  app[][o.s.a.AppFileSystem] Cleaning or creating temp directory /opt/sonarqube/temp
2025.07.04 13:35:11 INFO  app[][o.s.a.es.EsSettings] Elasticsearch listening on [HTTP: 127.0.0.1:9001, TCP: 127.0.0.1:{}]
2025.07.04 13:35:11 INFO  app[][o.s.a.ProcessLauncherImpl] Launch process[ELASTICSEARCH] from [/opt/sonarqube/elasticsearch]: /opt/jdk-17.0.10/bin/java -Xms4m -Xmx64m -XX:+UseSerialGC -Dcli.name=server -Dcli.script=./bin/elasticsearch -Dcli.libs=lib/tools/server-cli -Des.path.home=/opt/sonarqube/elasticsearch -Des.path.conf=/opt/sonarqube/temp/conf/es -Des.distribution.type=tar -cp /opt/sonarqube/elasticsearch/lib/*:/opt/sonarqube/elasticsearch/lib/cli-launcher/* org.elasticsearch.launcher.CliToolLauncher
2025.07.04 13:35:11 INFO  app[][o.s.a.SchedulerImpl] Waiting for Elasticsearch to be up and running
2025.07.04 13:35:29 WARN  app[][o.s.a.p.AbstractManagedProcess] Process exited with exit value [ElasticSearch]: 1
2025.07.04 13:35:29 INFO  app[][o.s.a.SchedulerImpl] Process[ElasticSearch] is stopped
2025.07.04 13:35:29 INFO  app[][o.s.a.SchedulerImpl] SonarQube is stopped
2025.07.04 13:57:53 INFO  app[][o.s.a.AppFileSystem] Cleaning or creating temp directory /opt/sonarqube/temp
2025.07.04 13:57:53 INFO  app[][o.s.a.es.EsSettings] Elasticsearch listening on [HTTP: 127.0.0.1:9001, TCP: 127.0.0.1:{}]
2025.07.04 13:57:53 INFO  app[][o.s.a.ProcessLauncherImpl] Launch process[ELASTICSEARCH] from [/opt/sonarqube/elasticsearch]: /opt/jdk-17.0.10/bin/java -Xms4m -Xmx64m -XX:+UseSerialGC -Dcli.name=server -Dcli.script=./bin/elasticsearch -Dcli.libs=lib/tools/server-cli -Des.path.home=/opt/sonarqube/elasticsearch -Des.path.conf=/opt/sonarqube/temp/conf/es -Des.distribution.type=tar -cp /opt/sonarqube/elasticsearch/lib/*:/opt/sonarqube/elasticsearch/lib/cli-launcher/* org.elasticsearch.launcher.CliToolLauncher
2025.07.04 13:57:53 INFO  app[][o.s.a.SchedulerImpl] Waiting for Elasticsearch to be up and running
2025.07.04 13:58:17 WARN  app[][o.s.a.p.AbstractManagedProcess] Process exited with exit value [ElasticSearch]: 1
2025.07.04 13:58:17 INFO  app[][o.s.a.SchedulerImpl] Process[ElasticSearch] is stopped
2025.07.04 13:58:17 INFO  app[][o.s.a.SchedulerImpl] SonarQube is stopped
[root@workernode1 logs]# cat web.log 
2025.07.03 13:02:35 INFO  web[][o.a.c.h.Http11Processor] Error parsing HTTP request header\n Note: further occurrences of HTTP request parsing errors will be logged at DEBUG level.
java.lang.IllegalArgumentException: Invalid character found in method name [0xff0xf40xff0xfd0x06...]. HTTP method names must be tokens
	at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:409)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:270)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025.07.03 15:52:50 INFO  web[][o.s.p.ProcessEntryPoint] Gracefully stopping process
2025.07.03 15:52:50 INFO  web[][o.s.s.n.NotificationDaemon] Notification service stopped
2025.07.03 15:52:50 INFO  web[][c.z.h.HikariDataSource] HikariPool-1 - Shutdown initiated...
2025.07.03 15:52:50 INFO  web[][c.z.h.HikariDataSource] HikariPool-1 - Shutdown completed.
2025.07.03 15:52:50 INFO  web[][o.s.s.p.d.EmbeddedDatabase] Embedded database stopped
2025.07.03 15:52:50 INFO  web[][o.s.s.app.WebServer] Web Server stopped
===========================================================================================================================================
===========================================================================================================================================

sudo -u postgres pg_restore -d sonarqube -c /bkp/sonarqube_db.backup

===========================================================================================================================================


===========================================================================================================================================
sqa_9bd08ff1bbcc34c55796719573b644b425be0a38     sonarqube-token            --------------token lates soanrqube reg
Analyze "java-profile-projets": sqp_9a9bc0bf72a1cdb12400e0a3d5e0b79d295b0de2            ====================  projects token 

  
  java-profile-1
  
  
  sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=java-profile-projets \
                            -Dsonar.qualityProfile=java-quality-1 \
                            -Dsonar.host.url=http://10.14.1.49:9000 \
                            -Dsonar.token=sqp_9a9bc0bf72a1cdb12400e0a3d5e0b79d295b0de2
                            -Dsonar.sourceEncoding=UTF-8 \
                            -Dsonar.language=java \
                            -Dsonar.java.binaries=target/classes \
                            -Dsonar.java.libraries=target/*.jar
                        """
						
						
						
						Analyze "javascript-project": sqp_2ecbfe89cdeb6ad23a535bb89828475381b2868a
						
   sonar-scanner \
  -Dsonar.projectKey=javascript-project \
  -Dsonar.sources=. \
  -Dsonar.host.url=http://10.14.1.49:9000 \
  -Dsonar.token=sqp_2ecbfe89cdeb6ad23a535bb89828475381b2868a
  
  
=========================================================================================================  

Analyze "frontend profile" 2: sqp_05341675b56c3f5b904c2563b78b1886413dde93     frontend-code token

sonar-scanner \
  -Dsonar.projectKey=frontend-profile \
  -Dsonar.sources=. \
  -Dsonar.host.url=http://10.14.1.49:9000 \
  -Dsonar.token=sqp_05341675b56c3f5b904c2563b78b1886413dde93
  
  
==============================================================================================


sonar-scanner \
  -Dsonar.projectKey=frontend-profile \
  -Dsonar.sources=. \
  -Dsonar.host.url=http://10.14.1.49:9000 \
  -Dsonar.token=sqp_05341675b56c3f5b904c2563b78b1886413dde93 \
  -Dsonar.sourceEncoding=UTF-8



stage('SonarQube Analysis') {
    steps {
        withSonarQubeEnv('sonarqube-token') {
            sh "${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner \
              -Dsonar.projectKey=frontend-profile \
              -Dsonar.sources=. \
              -Dsonar.host.url=http://10.14.1.49:9000 \
              -Dsonar.token=sqp_05341675b56c3f5b904c2563b78b1886413dde93 \
              -Dsonar.sourceEncoding=UTF-8"
        }
    }
}




stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool name: 'sonarqube-token', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
 
                    withSonarQubeEnv('sonarqube-token') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=java-profile-projets \
                            -Dsonar.qualityProfile=java-quality-1 \
                            -Dsonar.host.url=http://10.14.1.49:9000 \
                            -Dsonar.token=sqp_9a9bc0bf72a1cdb12400e0a3d5e0b79d295b0de2 \
                            -Dsonar.sourceEncoding=UTF-8 \
                            -Dsonar.language=java \
                            -Dsonar.java.binaries=target/classes \
                            -Dsonar.java.libraries=target/*.jar
                        """
                    }
===========================================================================================================================================
===========================================================================================================================================



pipeline {
    agent { label 'jenkins-agent1' }

    tools {
        nodejs 'nodejs20'  
    }

    environment {
        SONAR_PROJECT_KEY = 'frontend-profile'
        SONAR_HOST_URL = 'http://10.14.1.49:9000'
        SONAR_TOKEN = 'sqp_05341675b56c3f5b904c2563b78b1886413dde93'
        SONARQUBE_SCANNER_HOME = tool 'sonar-scanner' // Add this tool name in Jenkins
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'master', url: 'https://github.com/poojabharambe18/EnfinityUI.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing npm packages...'
                sh 'npm install'
            }
        }

        stage('Build Frontend') {
            steps {
                echo 'Building React project...'
                sh 'npm run build'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube Scan...'
                withSonarQubeEnv('sonarqube-token') 
                    sh """
                    ${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner \
                      -Dsonar.projectKey=${frontend-profile} \
                      -Dsonar.sources=. \
                      -Dsonar.host.url=${http://10.14.1.49:9000} \
                      -Dsonar.token=${sqp_05341675b56c3f5b904c2563b78b1886413dde93} \
                      -Dsonar.sourceEncoding=UTF-8
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
